{
  "info": {
    "_postman_id": "f15cb0e1-b331-4d17-9f89-3b04add49495",
    "name": "User Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create New User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status Code of 201 Created\", () => {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "pm.environment.set(\"userId\", response.id);",
              "pm.environment.set(\"name\", response.name);",
              "pm.environment.set(\"email\", response.email);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/signup",
          "host": ["{{baseUrl}}"],
          "path": ["signup"]
        }
      },
      "response": []
    },
    {
      "name": "Create Same User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status Code of 400 Bad Request\", () => {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "pm.test(\"Correct error message: 'Username already exists.'.\", () => {",
              "    pm.expect(response.error).to.eql(\"Username already exists.\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"{{name}}\",\n    \"email\": \"{{email}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/signup",
          "host": ["{{baseUrl}}"],
          "path": ["signup"]
        }
      },
      "response": []
    },
    {
      "name": "Create User with Invalid Email",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status Code of 400 Bad Request\", () => {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "pm.test(\"Correct error message: 'Email is not a valid address.'.\", () => {",
              "    pm.expect(response.error).to.eql(\"Email is not a valid address.\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"{{$randomFileName}}\",\n    \"email\": \"45678\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/signup",
          "host": ["{{baseUrl}}"],
          "path": ["signup"]
        }
      },
      "response": []
    },
    {
      "name": "Get Valid User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status Code of 200 OK\", () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "pm.test(\"Correct name\", () => {",
              "    pm.expect(response.name).to.eql(pm.environment.get(\"name\"));",
              "});",
              "",
              "pm.test(\"Correct email\", () => {",
              "    pm.expect(response.email).to.eql(pm.environment.get(\"email\"));",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user/:id",
          "host": ["{{baseUrl}}"],
          "path": ["user", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "{{userId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Invalid User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status Code of 400 Bad Request\", () => {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "// I can't find a way to guarantee a valid ObjectID that is definitely not in use.",
              "// Thus, if the test below fails, generate one manually from the link below and try again!",
              "// https://observablehq.com/@hugodf/mongodb-objectid-generator",
              "",
              "pm.test(\"Correct error message: 'User does not exist.'.\", () => {",
              "    pm.expect(response.error).to.eql(\"User does not exist.\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user/:id",
          "host": ["{{baseUrl}}"],
          "path": ["user", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "6281024984e755c4cefbc251"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Valid User Exists",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status Code of 200 OK\", () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "pm.test(\"Correct return value: 'true'.\", () => {",
              "    pm.expect(response.exists).to.eql(true);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user_exists/:name",
          "host": ["{{baseUrl}}"],
          "path": ["user_exists", ":name"],
          "variable": [
            {
              "key": "name",
              "value": "{{name}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Invalid User Does Not Exist",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status Code of 200 OK\", () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "pm.test(\"Correct return value: 'true'.\", () => {",
              "    pm.expect(response.exists).to.eql(false);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user_exists/:name",
          "host": ["{{baseUrl}}"],
          "path": ["user_exists", ":name"],
          "variable": [
            {
              "key": "name",
              "value": "{{$randomFullName}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["pm.test(\"Status Code of 200 OK\", () => {", "    pm.response.to.have.status(200);", "});", ""],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user/:id",
          "host": ["{{baseUrl}}"],
          "path": ["user", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "{{userId}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/api/v1"
    }
  ]
}
